**********
Examples
**********
The RISC-V Atom project consists of a wide range of examples programs out-of-the-box to test. These examples programs reside 
in `RVATOM/sw/examples` directory.

Switch to examples directory
:: 

  cd sw/examples

Lets run the classical "hello World!" example first!

Hello World
============
First we need to compile the hello world example with our RISC-V gcc cross-compiler. For this purpose, use the 
provided makefile as following.

::

  $ make target=atombones ex=hello-asm

The above command should generate a `hello.elf` file in the `hello-asm` directory. Now fire up atomsim and 
provide the generated elf file as argument.

::

  $ atomsim hello-asm/hello.elf

This should output:
::

  Hello World!
      -- from Assembly

We can test other examples also in the similar fashion by using the following syntax:
:: bash

  $ make target=<TARGET> ex=<EXAMPLE>

Run `make help` to get more information about supported targets an examples.


Banner
=======
::

  $ make target=atombones ex=banner
  $ atomsim banner/banner.elf

output:
::

                    .';,.           ....;;;.  
                   .ll,:o,                ':c,. 
                   .dd;co'                  .cl,  
                  .:o:;,.                     'o:  
                  co.                          .oc  
                 ,o'          .coddoc.          'd,  
                 lc         .lXMMMMMMXl.         ll  
                .o:         ;KMMMMMMMMK,         :o. 
                .o:         'OMMMMMMMMO.         :o. 
                 co.         .o0XNNX0o.         .oc  
                 .o:           ..''..           :o.  
                  'o:                          :o'  
                   .lc.                      .ll.  
                     ,lc'                  'cl,   
                       'cc:,..        ..,:c:'   
                          .;::::;;;;::::;.    
                                ....        
       ____  _________ _______    __         __                 
      / __ \/  _/ ___// ____/ |  / /  ____ _/ /_____  ____ ___  
     / /_/ // / \__ \/ /    | | / /  / __ `/ __/ __ \/ __ `__ \ 
    / _, _// / ___/ / /___  | |/ /  / /_/ / /_/ /_/ / / / / / /      
   /_/ |_/___//____/\____/  |___/   \__,_/\__/\____/_/ /_/ /_/  
  /=========By: Saurabh Singh (saurabh.s99100@gmail.com)====/
  
  UART tx at : 0x08000001
  UART rx at : 0x08000000


The Runexamples Script
=======================
Instead of testing all examples one-by-one, we can use the provided `atomsim-runexamples` script to 
automatically compile and simulate all examples.

Simply invoke the script as following
::

  $ atomsim-runexamples


Using Atomsim Vuart
====================
By default atomsim relays the output of the running application on stdout. But, in this mode of operation, 
user cannot provide any input to the running program. Alternatively, Atomsim can estabilish a two-way 
communication with on a linux serial port. This functionality is provided by the Vuart module in Atomsim.

Generating virtual serial ports
--------------------------------
A pair of connected serial ports can be generated by usng the provided `atomsim-gen-vports` script 
as following.

::

  $ atomsim-gen-vports

This will generate a pair of new virtual serial ports in `/dev/pts` and links them together using the 
`socat` linux command. This means that whatever is sent to port-1 is recieved at port-2 and vice versa.
Further, this script also generates symlinks to these generated ports in the `RVATOM` directory 
as `simport` and `userport`.

Interacting with Stdout and Stdin over virtual ports
-----------------------------------------------------
Open a new terminal (say terminal-2) and run the screen command as following

::

  $ screen $RVATOM/userport 9600

And on the other terminal (terminal-1) run atomsim as following

::

  $ atomsim hello-asm/hello.s --vuart=$RVATOM/simport

You should now be able to see the output on the terminal-2.

To close the screen command press `ctrl+a` and then type `:quit` and press `enter`